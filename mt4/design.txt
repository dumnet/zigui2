★Static: Pair1 vs Pair2, Long-Period(Daily), Short-Period(M5), Trend(Up/Dn)
★Params: RShort, RLong, Threshold, RIndicatorN, Entry, TIndicatorN, TakeProfits, Step, Exit
★Values: Profits, Lots, TTime  (Open - Profits: null)

R: Relation
T: Trade

●MT4、Tradestation
・Input
  * {★Static}
  * {★Params}

・Output
  * {★Static}
  * {★Params}
  * {★Values}

・Processing
  * Initial: int init()
    # Initialize positions
  * On Tick: int start()
    # Refresh indicators
    # Update positions
    # Check Entry/Exit signals for Each position
    ## Entry signal > 0
    ### Position not exists
    ### Open
    ## Exit signal < 0
    ### Profits <= 0
    ### Profits >  0 → Both Trailing Stop
    # return 0
  * Refresh indicators
  * Check Entry(1) / Exist(-1) signal
  * Initialize positions: void MyInitPosition(int magic of pair)
    # pips adjustments
    # retrieve positions
    ## 
  * Check Positions
  * Order Close - Pairs
  * Order Open  - Pairs
  * Trailing-Stop
  * HTTP Post Json


●TF
・Input
  * Training dataset (Validation ?)
  * Predicting candidate ★Params randomly

・Output
  * Suggested ★Params

・Processing
  # Training
  # Validation
  # Predicting and Ranking


●PQS
・Input FROM MT4、TS
  * {★Static}
  * {★Params}
  * {★Values}

・Output TO TF
  * Training dataset
  * Candidate {★Params}

・Input FROM TF
  * Suggested {★Params}

・Output TO MT4、TS
  * Suggested {★Params}

・Processing
  * FROM MT4、TS
    # ★LABEL: {★Values(Profits/diff-TTime) ⇒ Classification}
      ** 0 (Worst)   - less than minus average
      ** 1 (Worse)   - negative
      ** 2 (General) - positive
      ** 3 (Good)    - greater than positive average
      ** 4 (Better)  - greater than positive average + 1sigma
      ** 5 (Best)    - greater than positive average + 2sigma
    # Save / Update Same ★Params
    # Generate CSV / Training data set (Validation ?)
    # Generate predicting candidate ★Params randomly

  * TO TF

  * FROM TF
    # Receive suggested ★Params

  * TO MT4、TS
    ** {★Static}
    ** Suggested {★Params}

//// Data Structure ////
■struct ZiGuiPos[MAX_POS] {
    struct ZiGuiHedge;
}

■enum ZiGuiSymbol {
    GBPJPY = 0,
    EURJPY,
    GBPUSD,
    EURUSD,
    ...
    SYM_LAST
}

■string Symbol[SYM_LAST] = {
    "GBPJPY", "EURJPY", "GBPUSD", "EURUSD", ...
};

■struct ZiGuiPair {
    string sym;
    int  pos;       // order ticket
    inr  magic_b;   // magic number of buy
    double slOrd;   // stop loss
    double tpOrd;   // take profits
    double pipPoint;    // pips adjustment
    double slippagePips;// slippage
}

■struct ZiGuiHedge[] {
    int idx;
    int pos;
    double lots;
    struct ZiGuiPair p1;
    struct ZiGuiPair p2;
}

■Initialize positions
// retrieve positions
for (int idx = 0; i < POSITIONS; i++) {
    // bind magic number
    ZiGuiHedge[idx].p1.magic_b = magic + idx * 2;
    ZiGuiHedge[idx].p2.magic_b = magic + idx * 2 + 1;
    // init order ticket
    ZiGuiHedge[idx].p1.pos = 0;
    ZiGuiHedge[idx].p2.pos = 0;
    // stop loss
    ZiGuiHedge[idx].p1.slOrd = 0;
    ZiGuiHedge[idx].p2.slOrd = 0;
    // take profits
    ZiGuiHedge[idx].p1.tpOrd = 0;
    ZiGuiHedge[idx].p2.tpOrd = 0;

    for (int k = 0; k < OrdersTotal(); k++) {
        if (OrderSelect(k, SELECT_BY_POS) == false) break;

        if (OrderSymbol() == ZiGuiHedge[idx].p1.sym &&
            OrderMagicNumber() == ZiGuiHedge[idx].p1.magic_b) {
            ZiGuiHedge[idx].p1.pos = OrderTicket();
            break;
        }
        if (OrderSymbol() == ZiGuiHedge[idx].p2.sym &&
            OrderMagicNumber() == ZiGuiHedge[idx].p2.magic_b) {
            ZiGuiHedge[idx].p2.pos = OrderTicket();
            break;
        }
    }
}
int idx = 0;
for (int i = GBPJPY; i < SYM_LAST - 1; i++) {
    for (int j = i + 1; j < SYM_LAST; j++) {
        ZiGuiHedge[idx].idx  = idx / 2;
        ZiGuiHedge[idx].pos  = inPos;
        ZiGuiHedge[idx].lots = inLots;
        ZiGuiHedge[idx].p1.sym   = Symbol[i];
        ZiGuiHedge[idx++].p2.sym = Symbol[j];
    }
}
